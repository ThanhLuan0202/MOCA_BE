// <auto-generated />
using System;
using MOCA_Repositories.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MOCA_Repositories.Migrations
{
    [DbContext(typeof(MOCAContext))]
    [Migration("20250614100144_hahass")]
    partial class hahass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MOCA_Repositories.Enitities.Advertisement", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AdId")
                        .HasName("PK__Advertis__7130D5AEEAC19E1F");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.BabyTracking", b =>
                {
                    b.Property<int>("CheckupBabyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckupBabyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckupBabyId"));

                    b.Property<decimal?>("AmnioticFluidIndex")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateOnly?>("CheckupDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DoctorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EstimatedWeight")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("FetalHeartRate")
                        .HasColumnType("int");

                    b.Property<string>("PlacentaPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PregnancyId")
                        .HasColumnType("int")
                        .HasColumnName("PregnancyID");

                    b.Property<string>("UltrasoundImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckupBabyId")
                        .HasName("PK__BabyTrac__D24787C65166FBB5");

                    b.HasIndex("PregnancyId");

                    b.ToTable("BabyTracking", (string)null);
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.BookingPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentId")
                        .HasName("PK__BookingP__9B556A385DFE0A3C");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Bookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookmarkID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmarkId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookmarkId")
                        .HasName("PK__Bookmark__541A3A9182DFBFC6");

                    b.HasIndex("CourseId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ChapterId")
                        .HasName("PK__Chapters__0893A36A3A5BB820");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId")
                        .HasName("PK__Communit__AA1260189D4C542C");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPosts");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentReplyId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyId")
                        .HasName("PK__Communit__C25E46096FA36449");

                    b.HasIndex("ParentReplyId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityReplies");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71A73B54427E");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CourseCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__CourseCa__19093A2B53F7E7B3");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CoursePayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentGateway")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionIdResponse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentId")
                        .HasName("PK_CoursePayment");

                    b.HasIndex("OrderId");

                    b.ToTable("CoursePayments");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6DF6F2E6067C");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorBooking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("ConsultationType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("RequiredDeposit")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId")
                        .HasName("PK__DoctorBo__73951AED1152B807");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorBookings");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorContact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<DateTime?>("ContactDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContactId")
                        .HasName("PK__DoctorCo__5C66259BD78292D6");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorContacts");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorProfile", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId")
                        .HasName("PK__DoctorPr__2DC00EBFF45FC243");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorProfiles");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6BF3DC92B");

                    b.HasIndex("CourseId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LessonId")
                        .HasName("PK__Lessons__B084ACD0C4D2DFDE");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.MessagesWithDoctor", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendAt")
                        .HasColumnType("datetime");

                    b.Property<string>("SenderType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C0C9CF44BE54D");

                    b.HasIndex("ContactId");

                    b.ToTable("MessagesWithDoctor", (string)null);
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.MomProfile", b =>
                {
                    b.Property<int>("MomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MomID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MomId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MomId")
                        .HasName("PK__MomProfi__C5D0E583F1939CBC");

                    b.HasIndex("UserId");

                    b.ToTable("MomProfiles");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.OrderCourse", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__OrderCourse");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderCourses");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.OrderCourseDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderCourseDetail");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCourseDetails");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("PackageName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PackageId")
                        .HasName("PK__Packages__322035ECBAA07F41");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PostLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId")
                        .HasName("PK__PostLike__A2922C145CDB73B7");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PregnancyDiary", b =>
                {
                    b.Property<int>("PregnancyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PregnancyID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feeling")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MomID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PregnancyID")
                        .HasName("PK_PregnancyDiary");

                    b.HasIndex("MomID");

                    b.ToTable("PregnancyDiaries");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PregnancyTracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<decimal?>("BellySize")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PregnancyId")
                        .HasColumnType("int")
                        .HasColumnName("PregnancyID");

                    b.Property<DateOnly?>("TrackingDate")
                        .HasColumnType("date");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("TrackingId")
                        .HasName("PK__Pregnanc__3C19EDD191DDE92B");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PregnancyTracking", (string)null);
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PurchasePackage", b =>
                {
                    b.Property<int>("PurchasePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchasePackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasePackageId"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PurchasePackageId")
                        .HasName("PK__Purchase__C3B05BF013B87B00");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasePackage", (string)null);
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PurchasedCourse", b =>
                {
                    b.Property<int>("PurchasedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchasedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasedId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PurchasedId")
                        .HasName("PK__Purchase__2B7C245C31F15238");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchasedCourses");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.RefLect", b =>
                {
                    b.Property<int>("RefLectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefLectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefLectId"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("ImageReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TextReport")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RefLectId")
                        .HasName("PK__RefLect__42A5357DE77C4085");

                    b.HasIndex("UserId");

                    b.ToTable("RefLect", (string)null);
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3A2377654B");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACC73252E8");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.UserPregnancy", b =>
                {
                    b.Property<int>("PregnancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PregnancyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PregnancyId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<int?>("MomId")
                        .HasColumnType("int")
                        .HasColumnName("MomID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PregnancyId")
                        .HasName("PK__UserPreg__06D66108F8C73EC0");

                    b.HasIndex("MomId");

                    b.ToTable("UserPregnancies");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.BabyTracking", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.UserPregnancy", "Pregnancy")
                        .WithMany("BabyTrackings")
                        .HasForeignKey("PregnancyId")
                        .HasConstraintName("FK_BabyTracking_Pregnancy");

                    b.Navigation("Pregnancy");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.BookingPayment", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.DoctorBooking", "Booking")
                        .WithMany("BookingPayments")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookingPayments_Bookings");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Bookmark", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Course", "Course")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Bookmarks_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Chapter", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Chapters_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityPost", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("CommunityPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CommunityPosts_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityReply", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.CommunityReply", "ParentReply")
                        .WithMany("InverseParentReply")
                        .HasForeignKey("ParentReplyId")
                        .HasConstraintName("FK_CommunityReplies_Parent");

                    b.HasOne("MOCA_Repositories.Enitities.CommunityPost", "Post")
                        .WithMany("CommunityReplies")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_CommunityReplies_Posts");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("CommunityReplies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CommunityReplies_Users");

                    b.Navigation("ParentReply");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Course", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Courses_Categories");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Courses_Users");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CoursePayment", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.OrderCourse", "OrderCourse")
                        .WithMany("CoursePayments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_CoursePayments_OrderCourses");

                    b.Navigation("OrderCourse");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorBooking", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.DoctorProfile", "Doctor")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorBookings_Doctors");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("DoctorBookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DoctorBookings_Users");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorContact", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.DoctorProfile", "Doctor")
                        .WithMany("DoctorContacts")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorContacts_Doctors");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("DoctorContacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DoctorContacts_Users");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorProfile", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("DoctorProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DoctorProfiles_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Feedback", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Feedback_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Lesson", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK_Lessons_Chapters");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.MessagesWithDoctor", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.DoctorContact", "Contact")
                        .WithMany("MessagesWithDoctors")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_MessagesWithDoctor_Contact");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.MomProfile", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("MomProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MomProfiles_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.OrderCourse", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Discount", "Discount")
                        .WithMany("OrderCourses")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_OrderCourses_Discounts");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("OrderCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OrderCourses_Users");

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.OrderCourseDetail", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Course", "Course")
                        .WithMany("OrderCourseDetails")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_OrderCourseDetails_Courses");

                    b.HasOne("MOCA_Repositories.Enitities.OrderCourse", "OrderCourse")
                        .WithMany("OrderCourseDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderCourseDetails_OrderCourses");

                    b.Navigation("Course");

                    b.Navigation("OrderCourse");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PostLike", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.CommunityPost", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_PostLikes_Posts");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PostLikes_Users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PregnancyDiary", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.MomProfile", "MomProfile")
                        .WithMany("PregnancyDiaries")
                        .HasForeignKey("MomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PregnancyDiary_MomProfile");

                    b.Navigation("MomProfile");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PregnancyTracking", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.UserPregnancy", "Pregnancy")
                        .WithMany("PregnancyTrackings")
                        .HasForeignKey("PregnancyId")
                        .HasConstraintName("FK_PregnancyTracking_Pregnancy");

                    b.Navigation("Pregnancy");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PurchasePackage", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Discount", "Discount")
                        .WithMany("PurchasePackages")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_PurchasePackage_Discounts");

                    b.HasOne("MOCA_Repositories.Enitities.Package", "Package")
                        .WithMany("PurchasePackages")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK_PurchasePackage_Packages");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("PurchasePackages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PurchasePackage_Users");

                    b.Navigation("Discount");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.PurchasedCourse", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Course", "Course")
                        .WithMany("PurchasedCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_PurchasedCourses_Courses");

                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("PurchasedCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PurchasedCourses_Users");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.RefLect", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.User", "User")
                        .WithMany("RefLects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefLect_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.User", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.UserPregnancy", b =>
                {
                    b.HasOne("MOCA_Repositories.Enitities.MomProfile", "Mom")
                        .WithMany("UserPregnancies")
                        .HasForeignKey("MomId")
                        .HasConstraintName("FK_UserPregnancies_Users");

                    b.Navigation("Mom");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityPost", b =>
                {
                    b.Navigation("CommunityReplies");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CommunityReply", b =>
                {
                    b.Navigation("InverseParentReply");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Course", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Chapters");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderCourseDetails");

                    b.Navigation("PurchasedCourses");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Discount", b =>
                {
                    b.Navigation("OrderCourses");

                    b.Navigation("PurchasePackages");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorBooking", b =>
                {
                    b.Navigation("BookingPayments");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorContact", b =>
                {
                    b.Navigation("MessagesWithDoctors");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.DoctorProfile", b =>
                {
                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorContacts");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.MomProfile", b =>
                {
                    b.Navigation("PregnancyDiaries");

                    b.Navigation("UserPregnancies");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.OrderCourse", b =>
                {
                    b.Navigation("CoursePayments");

                    b.Navigation("OrderCourseDetails");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Package", b =>
                {
                    b.Navigation("PurchasePackages");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.User", b =>
                {
                    b.Navigation("CommunityPosts");

                    b.Navigation("CommunityReplies");

                    b.Navigation("Courses");

                    b.Navigation("DoctorBookings");

                    b.Navigation("DoctorContacts");

                    b.Navigation("DoctorProfiles");

                    b.Navigation("MomProfiles");

                    b.Navigation("OrderCourses");

                    b.Navigation("PostLikes");

                    b.Navigation("PurchasePackages");

                    b.Navigation("PurchasedCourses");

                    b.Navigation("RefLects");
                });

            modelBuilder.Entity("MOCA_Repositories.Enitities.UserPregnancy", b =>
                {
                    b.Navigation("BabyTrackings");

                    b.Navigation("PregnancyTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
